package {{package-name}};

import fi.tnie.db.ent.CyclicTemplateException;
import fi.tnie.db.ent.EntityRuntimeException;
import fi.tnie.db.ent.DataObject;
import fi.tnie.db.ent.DefaultQueryTemplate;
import fi.tnie.db.ent.Entity;
import fi.tnie.db.ent.EntityBuildContext;
import fi.tnie.db.ent.EntityBuilder;
import fi.tnie.db.ent.EntityMetaData;
import fi.tnie.db.ent.EntityFactory;
import fi.tnie.db.ent.value.AbstractEntityKey;
import fi.tnie.db.expr.TableReference;
import fi.tnie.db.types.*;
import fi.tnie.db.rpc.ReferenceHolder;

public interface {{table-interface}}
    extends fi.tnie.db.ent.Entity<
        {{table-interface}}.Attribute,
        {{table-interface}}.Reference,        
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Holder,		
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData,
        {{table-interface}}.Content
    > {{reference-list}} {
    
	class Type extends ReferenceType<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData, Content> {
		private static final long serialVersionUID = 1L;
		
		@Override
		public MetaData getMetaData() {		
			return {{table-interface}}Impl.{{table-interface}}MetaData.getInstance();
		}
		
		@Override
		public Type self() {
			return this;
		}
		
		public static final Type TYPE = new Type();
	}
	
	public static class Holder
		extends ReferenceHolder<Attribute, Reference, Type, {{table-interface}}, Holder, MetaData, Content> {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;		
		public static final Holder NULL = new Holder();
		
		private Holder() {			
		}

		public Holder({{table-interface}} value) {
			super(value);
		}
	
		@Override
		public Type getType() {
			return {{table-interface}}.Type.TYPE;
		}
		
		public static {{table-interface}}.Holder valueOf({{table-interface}} value) {
			return (value == null) ? {{table-interface}}.Holder.NULL : new {{table-interface}}.Holder(value);
		}
	}
	
	interface Factory
		extends fi.tnie.db.ent.EntityFactory<{{table-interface}}, Holder, MetaData, Factory, Content> {
		
	}
			
	interface MetaData
		extends fi.tnie.db.ent.EntityMetaData<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData, Content>		
		{{implemented-has-key-list}}
	{		
		@Override
		public Builder newBuilder(TableReference tableRef, EntityBuildContext ctx, fi.tnie.db.ent.UnificationContext unificationContext)
			throws fi.tnie.db.ent.EntityException;
	}
	
	interface Builder extends EntityBuilder<{{table-interface}}> {
		{{table-interface}} read(DataObject src);	
	}
	
	public class QueryTemplate
		extends DefaultQueryTemplate<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData, Content, QueryTemplate>
	{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		@Override
		public MetaData getMetaData() {
			return {{table-interface}}Impl.{{table-interface}}MetaData.getInstance();
		}

		@Override
		public QueryTemplate self() {
			return this;
		}		
		

		@Override
		public {{table-interface}}.Query newQuery() {			
			try {
				return new {{table-interface}}.Query(self());
			}
			catch (CyclicTemplateException e) {
				throw new EntityRuntimeException(e.getMessage(), e); 
			}
		}				
	}
		
		
	public static abstract class Key<
		A extends fi.tnie.db.ent.Attribute,
		R extends fi.tnie.db.ent.Reference,	
		T extends ReferenceType<A, R, T, E, H, F, M, C>,
		E extends Entity<A, R, T, E, H, F, M, C> & Has{{table-interface}}<A, R, T, E, H, F, M, C>,
		H extends ReferenceHolder<A, R, T, E, H, M, C>,
		F extends EntityFactory<E, H, M, F, C>,
		M extends EntityMetaData<A, R, T, E, H, F, M, C> & Has{{table-interface}}Key<A, R, T, E, H, F, M, C>,
		C extends fi.tnie.db.ent.Content
	>
		extends AbstractEntityKey<A, R, T, E, H, F, M, C, {{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, {{table-interface}}.Content, {{table-interface}}.Key<A, R, T, E, H, F, M, C>> {

		private static final long serialVersionUID = 1L;
		
		/**
		 * No-argument constructor for GWT Serialization
		 */
		protected Key() {	
		}

		protected Key(T type, R name) {
			super(type, name);
		}		

		@Override
		public {{table-interface}}.Holder newHolder({{table-interface}} o) {
			return {{table-interface}}.Holder.valueOf(o);
		}
		
		@Override
		public {{table-interface}}.MetaData getTarget() {		
			return {{table-interface}}Impl.{{table-interface}}MetaData.getInstance();
		}
		
		public void set(E e, {{table-interface}}.Holder newValue) {
			e.set{{table-interface}}(this, newValue);			
		}
		
		public {{table-interface}}.Holder get(E e) {
			return e.get{{table-interface}}(this);			
		}		

		@Override
		public {{table-interface}}.Type type() {
			return {{table-interface}}.Type.TYPE;
		}
		
		@Override
		public {{table-interface}}.Key<A, R, T, E, H, F, M, C> self() {		
			return this;
		}
	}

	@Override
	public Holder ref();
	
{{attribute-key-list}}
{{reference-key-list}}
        
{{attribute-name-type}}    
{{reference-name-type}}


		public static class Query
			extends fi.tnie.db.ent.DefaultEntityTemplateQuery<
				Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData, Content, QueryTemplate> {
		
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
		
			/**
			 * No-argument constructor for GWT Serialization
			 */			
			@SuppressWarnings("unused")
			private Query() {				
			}
					
			public Query(QueryTemplate root) 
				throws fi.tnie.db.ent.CyclicTemplateException {
				super(root);
			}
		}

	interface Content extends fi.tnie.db.ent.Content {  
  		{{value-accessor-list}}
		{{abstract-accessor-list}}
	}
		
	Content getContent();

} 

