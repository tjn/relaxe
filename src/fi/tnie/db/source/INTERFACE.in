package {{package-name}};

import fi.tnie.db.ent.DataObject;
import fi.tnie.db.ent.Entity;
import fi.tnie.db.ent.EntityBuildContext;
import fi.tnie.db.ent.EntityBuilder;
import fi.tnie.db.ent.EntityMetaData;
import fi.tnie.db.ent.value.AbstractEntityKey;
import fi.tnie.db.expr.TableReference;
import fi.tnie.db.types.*;
import fi.tnie.db.rpc.ReferenceHolder;

public interface {{table-interface}}
    extends fi.tnie.db.ent.Entity<
        {{table-interface}}.Attribute,
        {{table-interface}}.Reference,        
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Holder,		
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData
    > {{reference-list}} {
    
	class Type extends ReferenceType<Type, MetaData> {
		@Override
		public MetaData getMetaData() {		
			return {{table-interface}}Impl.{{table-interface}}MetaData.getInstance();
		}
	}
	

	Type TYPE = new Type();
	
	public static class Holder
		extends ReferenceHolder<Attribute, Reference, Type, {{table-interface}}, Holder, MetaData> {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;		
		public static final Holder NULL = new Holder();
		
		private Holder() {			
		}

		public Holder({{table-interface}} value) {
			super(value);
		}
	
		@Override
		public Type getType() {
			return {{table-interface}}.TYPE;
		}
		
		public static {{table-interface}}.Holder valueOf({{table-interface}} value) {
			return (value == null) ? {{table-interface}}.Holder.NULL : new {{table-interface}}.Holder(value);
		}
	}
	
	interface Factory
		extends fi.tnie.db.ent.EntityFactory<{{table-interface}}, Holder, MetaData, Factory> {
		
	}
	
		
	interface MetaData
		extends fi.tnie.db.ent.EntityMetaData<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData>
		{{implemented-has-key-list}}	
	{		
		@Override
		public Builder newBuilder(TableReference tableRef, EntityBuildContext ctx);
	}
	
	interface Builder extends EntityBuilder<{{table-interface}}> {
		{{table-interface}} read(DataObject src);	
	}	
		
		
	public static abstract class Key<
		R extends fi.tnie.db.ent.Reference, 
		T extends ReferenceType<T, S>,
		E extends Entity<?, R, T, E, ?, ?, S>,
		S extends EntityMetaData<?, R, T, E, ?, ?, S>		
	>
		extends AbstractEntityKey<R, T, E, S, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.MetaData, {{table-interface}}.Key<R, T, E, S>> {

		private static final long serialVersionUID = 1L;

		protected Key(S meta, R name) {
			super(meta, name);
		}		

		@Override
		public {{table-interface}}.Holder newHolder({{table-interface}} o) {
			return {{table-interface}}.Holder.valueOf(o);
		}
		
		@Override
		public {{table-interface}}.MetaData getTarget() {		
			return {{table-interface}}Impl.{{table-interface}}MetaData.getInstance();
		}

		@Override
		public {{table-interface}}.Type type() {
			return {{table-interface}}.TYPE;
		}
		
		@Override
		public {{table-interface}}.Key<R, T, E, S> self() {		
			return this;
		}
	}

	@Override
	public Holder ref();
	
{{attribute-key-list}}
{{reference-key-list}}
        
{{attribute-name-type}}    
{{reference-name-type}}


		public static class Query
			extends fi.tnie.db.ent.DefaultEntityQuery<Attribute, Reference, Type, {{table-interface}}, Factory, MetaData> {
		
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
		
			public Query({{table-interface}} root) throws fi.tnie.db.ent.CyclicTemplateException {
				super(root);
			}
		
			public Query(MetaData meta) {
				super(meta);
			}
		}
    
{{value-accessor-list}}
    
{{abstract-accessor-list}}
} 

