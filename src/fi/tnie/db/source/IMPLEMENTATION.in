package {{package-name}};

// import java.util.Date;
import fi.tnie.db.ent.EnumMetaData;
import fi.tnie.db.ent.EntityFactory;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.ForeignKey;
import fi.tnie.db.ent.value.*;
{{imports}}


/**
	Generated by fi.tnie.db.source.SourceGenerator
*/
public class {{table-impl-class}}
    extends {{table-impl-base}} {
        
    private {{table-interface}}.Holder holder;
    
    /**
     * generated value variable list below: 
     */
    {{value-variable-list}}
    
    public static class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}}> {

        private static {{table-interface}}MetaData instance = null;
        private static final Factory factory = new Factory();
        
        {{attribute-key-map-list}}
    
        public {{table-interface}}MetaData() {
            super({{table-interface}}.Attribute.class, {{table-interface}}.Reference.class);
            {{meta-data-initialization}}
        }
        
        @Override
        public Factory getFactory() {
			return factory;       
        }
        
        public static {{table-interface}}MetaData getInstance() {
        	if ({{table-interface}}MetaData.instance == null) {
        		{{table-interface}}MetaData.instance = new {{table-interface}}MetaData();
        	}
        	
        	return {{table-interface}}MetaData.instance; 
        }
        
        @Override
	    public Type getType() {
	     	return {{table-interface}}.TYPE;
	    }   
	    
	    @Override
		protected Column map(BaseTable table, Attribute a) {		
			return table.columnMap().get(a.identifier());
		}

		@Override
		protected ForeignKey map(BaseTable table, Reference r) {
			return table.foreignKeys().get(r.identifier());			
		}
		
			
		// {{key-accessor-list}}
		 
		 
    }    
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    public {{table-impl-class}}() {
    }

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.instance;
    }
    
    public static class Factory
    	implements EntityFactory<{{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}> {
        @Override
        public {{table-impl-base}} newInstance() {
           return new {{table-impl-class}}();
        }       
    }
    
    @Override       
    public {{table-impl-base}} self() {     
        return this;
    }
    
    @Override
	public {{table-interface}}.Holder ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
	
	
	/**	
    	public VarcharAccessor<Attribute, Person> lastName() {
	    	if (this.lastName == null) {
	    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
	    	}
	    	
	    	return this.lastName;
	    }	
	*/
	
	
	{{value-accessor-list}}
    
        
    {{accessor-list}}
} 

