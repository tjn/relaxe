package {{package-name}};


import java.util.ArrayList;
import java.util.List;
import fi.tnie.db.ent.EntityBuildContext;
import fi.tnie.db.ent.EnumMetaData;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.ForeignKey;
import fi.tnie.db.ent.value.*;
import fi.tnie.db.expr.TableReference;
{{imports}}


/**
	Generated by fi.tnie.db.source.SourceGenerator
	
	TODO: implementation should be non-public.
	
*/
public class {{table-impl-class}}
    extends {{table-impl-base}} {
        
    private {{table-interface}}.Holder holder;
    
    /**
     * generated value variable list below: 
     */
    {{value-variable-list}}
    
    
    
    /**
     * generated list below: 
     */
    {{reference-key-class-list}}
    
    
    public static class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Holder,
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData        
    >
    	implements {{table-interface}}.MetaData
    {
		private static final long serialVersionUID = 1L;
        private static {{table-interface}}MetaData instance = null;
        private static final {{table-interface}}.Factory factory = new FactoryImpl();
        
{{attribute-key-map-list}}

{{reference-key-map-list}}

		private java.util.Map<{{table-interface}}.Reference, EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?>> entityKeyMap = 
			new java.util.HashMap<{{table-interface}}.Reference, EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?>>();
    
        public {{table-interface}}MetaData() {
            super({{table-interface}}.Attribute.class, {{table-interface}}.Reference.class);
            {{meta-data-initialization}}
        }
        
        @Override
        public {{table-interface}}.Factory getFactory() {
			return factory;       
        }
        
        {{create-identity-map-method}}
        
        public static {{table-interface}}MetaData getInstance() {
        	if ({{table-interface}}MetaData.instance == null) {
        		{{table-interface}}MetaData.instance = new {{table-interface}}MetaData();
        	}
        	
        	return {{table-interface}}MetaData.instance; 
        }
        
        @Override
	    public Type getType() {
	     	return {{table-interface}}.TYPE;
	    }   
	    
	    @Override
		protected Column map(BaseTable table, Attribute a) {		
			return table.columnMap().get(a.identifier());
		}

		@Override
		protected ForeignKey map(BaseTable table, Reference r) {
			return table.foreignKeys().get(r.identifier());			
		}
		
		@Override
		public {{table-interface}}.MetaData self() {
			return this;
		}		
		
		public static class BuilderImpl
			extends fi.tnie.db.ent.DefaultEntityBuilder<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData>
			implements Builder {
			
			private Linker[] linkerList = {};
									
			private interface Linker {
				void link(fi.tnie.db.ent.DataObject src, {{table-interface}} dest);
			}
			
			public BuilderImpl(fi.tnie.db.expr.TableReference tableRef, fi.tnie.db.ent.EntityBuildContext ctx) 
				throws fi.tnie.db.ent.EntityException {
				super(tableRef, ctx);
				
				MetaData m = getMetaData();
				
				List<Linker> ll = new ArrayList<Linker>();				
				
				// {{builder-linker-init}}
				
				this.linkerList = ll.toArray(this.linkerList);
			}

			@Override
			public MetaData getMetaData() {			
				return {{table-interface}}MetaData.getInstance();
			}
			
			@Override
			public {{table-interface}} read(fi.tnie.db.ent.DataObject src) {			
				{{table-interface}} e = super.read(src);
				
				for (Linker lnk : linkerList) {
					lnk.link(src, e);
				}								
				
				return e;
			}
		}		
		
			
		// {{key-accessor-list}}
		

		@Override
		public Builder newBuilder(TableReference tableRef, EntityBuildContext ctx)
			throws fi.tnie.db.ent.EntityException {
			return new BuilderImpl(tableRef, ctx);
		}	

		@Override
		public EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?> getEntityKey(Reference ref) {			
			if (ref == null) {
				throw new NullPointerException("ref");
			}
			
			return entityKeyMap.get(ref);
		}		
		
		
    }    
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    public {{table-impl-class}}() {
    }

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.instance;
    }
    
    public static class FactoryImpl
    	implements {{table-interface}}.Factory {
        @Override
        public Default{{table-interface}} newInstance() {
           return new {{table-interface}}Impl();
        }
        
        @Override
		public {{table-interface}}.Holder newHolder({{table-interface}} value) {
			return {{table-interface}}.Holder.valueOf(value);
		}

		@Override
		public MetaData getMetaData() {
			return {{table-interface}}MetaData.instance;
		}

		@Override
		public Factory self() {
			return this;
		}       
    }
        
    @Override       
    public {{table-impl-base}} self() {     
        return this;
    }
    
    @Override
	public {{table-interface}}.Holder ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
	
	
	/**	
    	public VarcharAccessor<Attribute, Person> lastName() {
	    	if (this.lastName == null) {
	    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
	    	}
	    	
	    	return this.lastName;
	    }	
	*/
	
	
	{{value-accessor-list}}
    
        
    {{accessor-list}}
    
    /**
     * {reference-map-list} below: 
     */
    {{reference-map-list}}
} 

