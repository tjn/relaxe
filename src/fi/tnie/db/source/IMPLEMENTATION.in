package {{package-name}};

// import java.util.Date;
import fi.tnie.db.DefaultEntityKey;
import fi.tnie.db.ent.EnumMetaData;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.ForeignKey;
import fi.tnie.db.ent.value.*;
{{imports}}


/**
	Generated by fi.tnie.db.source.SourceGenerator
	
	TODO: implementation should be non-public.
	
*/
public class {{table-impl-class}}
    extends {{table-impl-base}} {
        
    private {{table-interface}}.Holder holder;
    
	private static class KeyBase <
		X extends fi.tnie.db.ent.Attribute, 
		Y extends fi.tnie.db.ent.Reference, 
		Z extends fi.tnie.db.types.ReferenceType<Z,S>, 
		VH extends fi.tnie.db.rpc.ReferenceHolder<X,Y,Z,V,VH,S>, 
		V extends fi.tnie.db.ent.Entity<X,Y,Z,V,VH,?,S>, 
		S extends fi.tnie.db.ent.EntityMetaData<X,Y,Z,V,VH,?,S>		
	>	
		extends DefaultEntityKey<Y, Z, V, S, Attribute, Reference, Type, {{table-interface}}, Holder, MetaData, KeyBase<X, Y, Z, VH, V, S>> {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		/**
		 * No-argument constructor for GWT Serialization
		 */
		@SuppressWarnings("unused")
		private KeyBase() {	
		}		
				
		public KeyBase(S source, Y name) {
			super(source, {{table-interface}}MetaData.getInstance(), name);
		}
		
		@Override
		public KeyBase<X, Y, Z, VH, V, S> self() {		
			return this;
		}

		@Override
		public Holder newHolder({{table-interface}} newValue) {
			return Holder.valueOf(newValue);
		}

		@Override
		public void clear(V src) {
			src.setRef(self(), Holder.valueOf(null));
		}
		
		public void set(V src, {{table-interface}} newValue) {
			set(src, Holder.valueOf(newValue));
		}
		
		public void set(V src, {{table-interface}}.Holder newValue) {
			src.setRef(self(), newValue);
		}
	}    
    
    /**
     * generated value variable list below: 
     */
    {{value-variable-list}}
    
    
    
    /**
     * generated list below: 
     */
    {{reference-key-class-list}}
    
    
    public static class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Holder,
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData        
    >
    	implements {{table-interface}}.MetaData
    {

        private static {{table-interface}}MetaData instance = null;
        private static final {{table-interface}}.Factory factory = new FactoryImpl();
        
{{attribute-key-map-list}}

{{reference-key-map-list}}

		private java.util.Map<{{table-interface}}.Reference, EntityKey<Reference, Type, {{table-interface}}, {{table-interface}}.MetaData, ?, ?, ?, ?, ?>> entityKeyMap = 
			new java.util.HashMap<{{table-interface}}.Reference, EntityKey<Reference, Type, {{table-interface}}, {{table-interface}}.MetaData, ?, ?, ?, ?, ?>>();
    
        public {{table-interface}}MetaData() {
            super({{table-interface}}.Attribute.class, {{table-interface}}.Reference.class);
            {{meta-data-initialization}}
        }
        
        @Override
        public {{table-interface}}.Factory getFactory() {
			return factory;       
        }
        
        {{create-identity-map-method}}
        
        public static {{table-interface}}MetaData getInstance() {
        	if ({{table-interface}}MetaData.instance == null) {
        		{{table-interface}}MetaData.instance = new {{table-interface}}MetaData();
        	}
        	
        	return {{table-interface}}MetaData.instance; 
        }
        
        @Override
	    public Type getType() {
	     	return {{table-interface}}.TYPE;
	    }   
	    
	    @Override
		protected Column map(BaseTable table, Attribute a) {		
			return table.columnMap().get(a.identifier());
		}

		@Override
		protected ForeignKey map(BaseTable table, Reference r) {
			return table.foreignKeys().get(r.identifier());			
		}
		
		@Override
		public {{table-interface}}.MetaData self() {
			return this;
		}		
		
			
		// {{key-accessor-list}}
		
		
//		public <
//			X extends fi.tnie.db.ent.Attribute, 
//			Y extends fi.tnie.db.ent.Reference, 
// 			Z extends fi.tnie.db.types.ReferenceType<Z>, 
// 			V extends fi.tnie.db.ent.Entity<X,Y,Z,V,?,O>, 
// 			O extends fi.tnie.db.ent.EntityMetaData<X,Y,Z,V,?,?,O>> 
// 		fi.tnie.db.ent.value.EntityKey<
// 			{{table-interface}}.Reference,
// 			{{table-interface}}.Type,
// 			{{table-interface}},
// 			{{table-interface}}.MetaData,
// 			Z,V,?,O,?>
// 		getEntityKey({{table-interface}}.Reference ref, O target) {			
// 			return target.newKey(self());			
// 		}
		
		
		public <X extends fi.tnie.db.ent.Attribute, Y extends fi.tnie.db.ent.Reference, Z extends fi.tnie.db.types.ReferenceType<Z,O>, V extends fi.tnie.db.ent.Entity<X,Y,Z,V,?,?,O>, O extends fi.tnie.db.ent.EntityMetaData<X,Y,Z,V,?,?,O>> fi.tnie.db.ent.value.EntityKey<{{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.MetaData,Z,V,?,O,?> getEntityKey({{table-interface}}.Reference ref, O target) {
			EntityKey<Reference, Type, {{table-interface}}, MetaData, Z, V, ?, O, ?> k = target.newKey(ref, self());
			return k;
		}
		
		public <
			X extends fi.tnie.db.ent.Attribute, 
			Y extends fi.tnie.db.ent.Reference, 
			Z extends fi.tnie.db.types.ReferenceType<Z,S>, 
			VH extends fi.tnie.db.rpc.ReferenceHolder<X,Y,Z,V,VH,S>, 
			V extends fi.tnie.db.ent.Entity<X,Y,Z,V,VH,?,S>, 
			S extends fi.tnie.db.ent.EntityMetaData<X,Y,Z,V,VH,?,S>
		> 
		fi.tnie.db.ent.value.EntityKey<
			Y, Z, V, S, 
			{{table-interface}}.Type,
			{{table-interface}},
			{{table-interface}}.Holder,
			{{table-interface}}.MetaData, 
			?>		
		newKey(Y ref, S source) {		
			KeyBase<X, Y, Z, VH, V, S> b = new KeyBase<X, Y, Z, VH, V, S>(source, ref);			
			return b;			
		}

		@Override
		public EntityKey<Reference, Type, {{table-interface}}, {{table-interface}}.MetaData, ?, ?, ?, ?, ?> getEntityKey(Reference ref) {			
			if (ref == null) {
				throw new NullPointerException("ref");
			}
			
			return entityKeyMap.get(ref);
		}		
		
		
    }    
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    public {{table-impl-class}}() {
    }

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.instance;
    }
    
    public static class FactoryImpl
    	implements {{table-interface}}.Factory {
        @Override
        public Default{{table-interface}} newInstance() {
           return new {{table-interface}}Impl();
        }
        
        @Override
		public {{table-interface}}.Holder newHolder({{table-interface}} value) {
			return {{table-interface}}.Holder.valueOf(value);
		}

		@Override
		public MetaData getMetaData() {
			return {{table-interface}}MetaData.instance;
		}

		@Override
		public Factory self() {
			return this;
		}       
    }
        
    @Override       
    public {{table-impl-base}} self() {     
        return this;
    }
    
    @Override
	public {{table-interface}}.Holder ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
	
	
	/**	
    	public VarcharAccessor<Attribute, Person> lastName() {
	    	if (this.lastName == null) {
	    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
	    	}
	    	
	    	return this.lastName;
	    }	
	*/
	
	
	{{value-accessor-list}}
    
        
    {{accessor-list}}
    
    /**
     * generated list below: 
     */
    {{reference-map-list}}
} 

