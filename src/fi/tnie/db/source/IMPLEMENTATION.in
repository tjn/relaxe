package {{package-name}};


import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import fi.tnie.db.ent.EntityBuildContext;
import fi.tnie.db.ent.EnumMetaData;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.ForeignKey;
import fi.tnie.db.meta.PrimaryKey;
import fi.tnie.db.meta.ColumnMap;
import fi.tnie.db.meta.SchemaElementMap;
import fi.tnie.db.expr.SchemaElementName;
import fi.tnie.db.ent.value.*;
import fi.tnie.db.expr.TableReference;
import fi.tnie.db.expr.Identifier;
import fi.tnie.db.meta.Environment;
import fi.tnie.db.types.ReferenceType;

{{imports}}


/**
	Generated by fi.tnie.db.source.SourceGenerator
*/
class {{table-impl-class}}
    extends {{table-impl-base}} {
        
    private {{table-interface}}.Holder holder;
    private transient {{table-interface}}.Content content;
    
    /**
     * generated list below: 
     */
    {{reference-key-class-list}}

	{{attribute-container-implementation}}
	
	
	
	private static class {{table-interface}}ForeignKeyMap
		extends fi.tnie.db.meta.AbstractSchemaElementMap<ForeignKey> {
		
		// private static final long serialVersionUID = -4344734322943134268L;
		
		/**
		 * No-argument constructor for GWT Serialization
		 */
		private {{table-interface}}ForeignKeyMap() {		
		}
		
		private {{table-interface}}ForeignKeyMap(Environment environment, Map<Identifier, ForeignKey> content) {
			super(environment, content);
		}
	}
	
	private static class {{table-interface}}ForeignKey
		extends fi.tnie.db.ent.EntityTableForeignKey {
		
		private static final long serialVersionUID = -621396725083384123L;

		/**
		 * No-argument constructor for GWT Serialization
		 */
		private {{table-interface}}ForeignKey() {			
		}
		
		private {{table-interface}}ForeignKey(BaseTable table, Identifier name,
				ColumnMap columnMap, Map<Identifier, Identifier> columnPairMap,
				ReferenceType<?, ?, ?, ?, ?, ?, ?, ?> type) {
			super(table, name, columnMap, columnPairMap, type);		
		}
	}	
		    
		    
	
	
	private static class {{table-interface}}Table
		extends fi.tnie.db.meta.AbstractImmutableBaseTable {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 7640632830490376459L;
		private ColumnMap columnMap;
		private PrimaryKey primaryKey;
		private SchemaElementMap<ForeignKey> foreignKeys;
		
		{{base-table-column-variable-list}}
		
		/**
		 * No-argument constructor for GWT Serialization
		 */
		@SuppressWarnings("unused")
		private {{table-interface}}Table() {	
		}

		public {{table-interface}}Table(Environment env, SchemaElementName tableName) {
			super(env, tableName);
			
			fi.tnie.db.meta.ImmutableColumnMap.Builder cmb = new fi.tnie.db.meta.ImmutableColumnMap.Builder(env);
			
			{{populate-column-map-block}}			
			
			this.columnMap = cmb.newColumnMap();
			this.primaryKey = createPrimaryKey(env);
			this.foreignKeys = createForeignKeyMap(env, columnMap);
		}
		
		private PrimaryKey createPrimaryKey(Environment env) {
			{{create-primary-key-body}}		
		}

		private SchemaElementMap<ForeignKey> createForeignKeyMap(Environment env, ColumnMap columnMap) {
			{{create-foreign-key-map-body}}
		}
				
		@Override
		public ColumnMap columnMap() {
			return this.columnMap;
		}
		
		@Override
		public PrimaryKey getPrimaryKey() {
			return this.primaryKey;
		}

		@Override
		public SchemaElementMap<ForeignKey> foreignKeys() {
			return foreignKeys;		
		}
	}	
    
    public static class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Holder,
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData,
        {{table-interface}}.Content
    >
    	implements {{table-interface}}.MetaData
    {
		private static final long serialVersionUID = 1L;
        private static {{table-interface}}MetaData instance = null;
        private final {{table-interface}}.Factory factory = new FactoryImpl();
        private fi.tnie.db.meta.BaseTable table;
        
        @Override
        public BaseTable getBaseTable() {
			{{create-get-base-table-body}}
        }
        
        private java.util.Map<Attribute, fi.tnie.db.ent.value.PrimitiveKey<Attribute, {{table-interface}}, ?, ?, ?, ?>> keyMap = new java.util.HashMap<Attribute, fi.tnie.db.ent.value.PrimitiveKey<Attribute, {{table-interface}}, ?, ?, ?, ?>>();        
        private java.util.Map<Attribute, fi.tnie.db.ent.value.PrimitiveKey<Attribute, {{table-interface}}, ?, ?, ?, ?>> getKeyMap() {return this.keyMap; }
        
        @Override
		public fi.tnie.db.ent.value.PrimitiveKey<Attribute, {{table-interface}}, ?, ?, ?, ?> getKey(Attribute a) {
			return getKeyMap().get(a);
		}
                
        
{{attribute-key-map-list}}


{{reference-key-map-list}}

		private java.util.Map<{{table-interface}}.Reference, EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, {{table-interface}}.Content, ?, ?, ?, ?, ?, ?, ?, ?, ?>> entityKeyMap = 
			new java.util.TreeMap<{{table-interface}}.Reference, EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, {{table-interface}}.Content, ?, ?, ?, ?, ?, ?, ?, ?, ?>>();
			
		
		{{attribute-key-container-implementation}}
    
        public {{table-interface}}MetaData() {
            // updated
            
            {{meta-data-initialization}}
            
    		populate(getBaseTable());			    
        }
        
        @Override
        public Class<{{table-interface}}.Attribute> getAttributeNameType() {
              return {{table-interface}}.Attribute.class;
        }
        
        @Override
        public Class<{{table-interface}}.Reference> getReferenceNameType() {
        	return {{table-interface}}.Reference.class;
        }
        
        
        @Override
        public {{table-interface}}.Factory getFactory() {
			return factory;       
        }
        
        {{create-identity-map-method}}
        
        public static {{table-interface}}MetaData getInstance() {
        	if ({{table-interface}}MetaData.instance == null) {
        		{{table-interface}}MetaData.instance = new {{table-interface}}MetaData();
        	}
        	
        	return {{table-interface}}MetaData.instance; 
        }
        
        @Override
	    public Type type() {
	     	return {{table-interface}}.Type.TYPE;
	    }   
	    
	    @Override
		protected Column map(BaseTable table, Attribute a) {		
			return table.columnMap().get(a.identifier());
		}

		@Override
		protected ForeignKey map(BaseTable table, Reference r) {
			return table.foreignKeys().get(r.identifier());			
		}
		
		@Override
		public {{table-interface}}.MetaData self() {
			return this;
		}		
			
		// {{key-accessor-list}}
		

		@Override
		public Builder newBuilder(TableReference referencing, ForeignKey referencedBy, TableReference tableRef, EntityBuildContext ctx, fi.tnie.db.ent.UnificationContext unificationContext)
			throws fi.tnie.db.ent.EntityException {
			return new BuilderImpl(referencing, referencedBy, tableRef, ctx, unificationContext);
		}	

		@Override
		public EntityKey<Attribute, Reference, Type, {{table-interface}}, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, {{table-interface}}.Content, ?, ?, ?, ?, ?, ?, ?, ?, ?> getEntityKey(Reference ref) {			
			if (ref == null) {
				throw new NullPointerException("ref");
			}
			
			return entityKeyMap.get(ref);
		}
    }
    
	public static class BuilderImpl
		extends fi.tnie.db.ent.DefaultEntityBuilder<Attribute, Reference, Type, {{table-interface}}, Holder, Factory, MetaData, Content>
		implements Builder {
		
		private Linker[] linkerList = {};
								
		private interface Linker {
			void link(fi.tnie.db.ent.DataObject src, {{table-interface}}.Holder dest);
		}
		
		public BuilderImpl(TableReference referencing, ForeignKey referencedBy, fi.tnie.db.expr.TableReference tableRef, fi.tnie.db.ent.EntityBuildContext ctx, fi.tnie.db.ent.UnificationContext unificationContext) 
			throws fi.tnie.db.ent.EntityException {
			super(referencing, referencedBy, tableRef, ctx, unificationContext);
			
			MetaData m = getMetaData();
			
			List<Linker> ll = new ArrayList<Linker>();				
			
			// {{builder-linker-init}}
			
			this.linkerList = ll.toArray(this.linkerList);
		}

		@Override
		public MetaData getMetaData() {			
			return {{table-interface}}MetaData.getInstance();
		}
		
		@Override
		public {{table-interface}}.Holder read(fi.tnie.db.ent.DataObject src) {			
			{{table-interface}}.Holder e = super.read(src);
			
			for (Linker lnk : linkerList) {
				lnk.link(src, e);
			}								
			
			return e;
		}
	}		
        
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    public {{table-impl-class}}() {
    }

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.getInstance();
    }
    
    public static class FactoryImpl
    	implements {{table-interface}}.Factory {
        @Override
        public Default{{table-interface}} newEntity() {
           return new {{table-interface}}Impl();
        }
        
        @Override
		public {{table-interface}}.Holder newHolder({{table-interface}} value) {
			return {{table-interface}}.Holder.valueOf(value);
		}

		@Override
		public MetaData getMetaData() {
			return {{table-interface}}MetaData.instance;
		}

		@Override
		public Factory self() {
			return this;
		}       
    }
        
    @Override       
    public {{table-impl-base}} self() {     
        return this;
    }
    
    @Override
	public {{table-interface}}.Holder ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
	
	
	/**	
    	public VarcharAccessor<Attribute, Person> lastName() {
	    	if (this.lastName == null) {
	    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
	    	}
	    	
	    	return this.lastName;
	    }	
	*/
	
	
	@Override
	public java.util.Set<Attribute> attributes() {
		java.util.Set<Attribute> attrs = java.util.EnumSet.noneOf(Attribute.class);
	
		{{attributes-method-statement-list}}
			
		return java.util.Collections.unmodifiableSet(attrs);
	}
	
	

    /**
     * {reference-map-list} below: 
     */
    {{reference-map-list}}
    
    @Override
	public Content getContent() {
		if (this.content == null) {
			this.content = new Content() {
			    /**
			     * generated value variable list below: 
			     */
			    {{value-variable-list}}				

				{{value-accessor-list}}
				 
			  	{{accessor-list}}			
			};
		}
		
		return this.content;
	}    
} 

