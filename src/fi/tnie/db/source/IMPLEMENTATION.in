package {{package-name}};

import fi.tnie.db.ent.EnumMetaData;
import fi.tnie.db.ent.EntityFactory;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.ForeignKey;
import fi.tnie.db.rpc.ReferenceHolder;
{{imports}}

public class {{table-impl-class}}
    extends {{table-impl-base}} {
    
    private ReferenceHolder<{{table-interface}}, {{table-interface}}.Type> holder;
    
    public static class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}}> {

        private static final {{table-interface}}MetaData instance = new {{table-interface}}MetaData();
        private final Factory factory = new Factory();
    
        public {{table-interface}}MetaData() {
            super({{table-interface}}.Attribute.class, {{table-interface}}.Reference.class);
        }
        
        @Override
        public Factory getFactory() {
			return factory;       
        }
        
        public static {{table-interface}}MetaData getInstance() {
        	return {{table-interface}}MetaData.instance; 
        }
        
        @Override
	    public Type getType() {
	     	return {{table-interface}}.TYPE;
	    }   
	    
	    @Override
		protected Column map(BaseTable table, Attribute a) {		
			return table.columnMap().get(a.identifier());
		}

		@Override
		protected ForeignKey map(BaseTable table, Reference r) {
			return table.foreignKeys().get(r.identifier());			
		}
    }    
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    public {{table-impl-class}}() {
    }

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.instance;
    }
    
    public static class Factory
    	implements EntityFactory<{{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}> {
        @Override
        public {{table-impl-base}} newInstance() {
           return new {{table-impl-class}}();
        }       
    }
    
    @Override       
    public {{table-impl-base}} self() {     
        return this;
    }
    
    @Override
	public ReferenceHolder<{{table-interface}}, {{table-interface}}.Type> ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
    
        
    {{accessor-list}}
} 

