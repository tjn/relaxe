package fi.tnie.db;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.EnumMap;
import java.util.Map;

import fi.tnie.db.meta.BaseTable;
import fi.tnie.db.meta.Column;
import fi.tnie.db.meta.PrimaryKey;

public abstract class DBEntity<K extends Enum<K>, E extends DBEntity<K, E>> 
	extends DBObject<K> {

	private Date deleted;	
	private DBEntity<K, E> loadedAs = null;	
	
	public abstract E newInstance();	
	public abstract EntityFactory<K, E> getFactory();

	protected Map<K, Object> createValueMap() {				
		return new EnumMap<K, Object>(getFactory().getColumnNameType());
	}

	void markDeleted() {
		this.deleted = new Date();
	}

	void save(Connection c)
		throws SQLException {
								
		saving();
		
		Statement st = c.createStatement();		
		StringBuffer qb = new StringBuffer();
		
		
//		if (())) {
////			if (!isDeleted()) {
////				
////			}			
//		}
//		else {
//			
//		}
		
//		st.executeUpdate(sql, autoGeneratedKeys)		
						
		saved();
	}
	
	public boolean isNew() {
		return (this.loadedAs == null); 
	}
			
	
	protected Map<K, ?> getPrimaryKey() {		
		PrimaryKey pkdef = getPKDefinition();		
		Map<K, ?> vm = values();
		Class<K> kt = getFactory().getColumnNameType();
		EnumMap<K, ?> pk = new EnumMap<K, Object>(kt);
		
		for (Column c : pkdef.columns()) {						
			K key = getColumn(c.getName());				
			Object value = vm.get(key);

			if (value == null) {
				return null;			
			}
		}
		
		return pk;
	}
	

	
	
	protected boolean isInsertable() {
		PrimaryKey pk = getPKDefinition();		
		Map<K, Object> vm = values();
		
		for (Column c : pk.columns()) {
			Boolean ai = c.isAutoIncrement();		
						
			if (ai != null && ai.booleanValue() == false) {				
				K key = getColumn(c.getName());				
				Object value = vm.get(key);
				
				if (value == null) {
					return false;
				}
			}
		}		
		
		return true;
	}
	
	public K getColumn(String n)  {
		Class<K> kt = getFactory().getColumnNameType();
		return Enum.valueOf(kt, n);
	}
	

	protected void saved() {
		// TODO Auto-generated method stub		
	}

	protected void saving() {		
	}
	
//	public Map<K, Object> values() {
//		if (values == null) {
//			this.values = createValueMap();
//		}
//		
//		return Collections.unmodifiableMap(this.values);
//	}	
	
	private PrimaryKey getPKDefinition() {
		BaseTable t = getFactory().getTable();
		
		if (t == null) {
			throw new IllegalStateException("No base table for the entity: " + this);			
		}
		
		PrimaryKey pk = t.getPrimaryKey();
		
		if (pk == null) {
			throw new IllegalStateException("No primary key in table: " + t.getQualifiedName());
		}		
		
		return pk;
	}
	
}
 