package {{package-name}};

import com.appspot.relaxe.ent.EntityBuildContext;
import com.appspot.relaxe.ent.EnumMetaData;
import com.appspot.relaxe.meta.Column;
import com.appspot.relaxe.meta.BaseTable;
import com.appspot.relaxe.meta.ForeignKey;
import com.appspot.relaxe.meta.PrimaryKey;
import com.appspot.relaxe.meta.ColumnMap;
import com.appspot.relaxe.meta.SchemaElementMap;
import com.appspot.relaxe.expr.SchemaElementName;
import com.appspot.relaxe.ent.value.*;
import com.appspot.relaxe.expr.TableReference;

{{imports}}


/**
	Generated by com.appspot.relaxe.source.SourceGenerator
*/

class {{table-interface}}MetaData
        extends EnumMetaData
    <
        {{table-interface}}.Attribute, 
        {{table-interface}}.Reference,
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Mutable,
        {{table-interface}}.Holder,
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData
    >
	implements {{table-interface}}.MetaData
{
	// private static final long serialVersionUID = 1L;
    private static {{table-interface}}MetaData instance = null;
    private final {{table-interface}}.Factory factory = new FactoryImpl();
    private com.appspot.relaxe.meta.BaseTable table;
    
    @Override
    public BaseTable getBaseTable() {
		{{create-get-base-table-body}}
    }
    
    private java.util.Map<{{table-interface}}.Attribute, com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, {{table-interface}}.Mutable, ?, ?, ?, ?>> keyMap = 
    	new java.util.HashMap<{{table-interface}}.Attribute, com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, {{table-interface}}.Mutable, ?, ?, ?, ?>>();        

    private java.util.Map<{{table-interface}}.Attribute, com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, {{table-interface}}.Mutable, ?, ?, ?, ?>> getKeyMap() {return this.keyMap; }
    
    @Override
	public com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, {{table-interface}}.Mutable, ?, ?, ?, ?> getKey({{table-interface}}.Attribute a) {
		return getKeyMap().get(a);
	}
	
    /**
     * generated list below: 
     */
    {{reference-key-class-list}}	
                
	{{attribute-key-map-list}}

	{{reference-key-map-list}}

	private java.util.Map<{{table-interface}}.Reference, EntityKey<{{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.Mutable, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?, ?>> entityKeyMap = 
		new java.util.TreeMap<{{table-interface}}.Reference, EntityKey<{{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.Mutable, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?, ?>>();
		
	
	{{attribute-key-container-implementation}}

    public {{table-interface}}MetaData() {
        // updated
        
        {{meta-data-initialization}}
        
		populate(getBaseTable());			    
    }
    
    @Override
    public Class<{{table-interface}}.Attribute> getAttributeNameType() {
          return {{table-interface}}.Attribute.class;
    }
    
    @Override
    public Class<{{table-interface}}.Reference> getReferenceNameType() {
    	return {{table-interface}}.Reference.class;
    }
    
    
    @Override
    public {{table-interface}}.Factory getFactory() {
		return factory;       
    }
    
    {{create-identity-map-method}}
    
    public static {{table-interface}}MetaData getInstance() {
    	if ({{table-interface}}MetaData.instance == null) {
    		{{table-interface}}MetaData.instance = new {{table-interface}}MetaData();
    	}
    	
    	return {{table-interface}}MetaData.instance; 
    }
    
    @Override
    public {{table-interface}}.Type type() {
     	return {{table-interface}}.Type.TYPE;
    }   
    
    @Override
	protected Column map(BaseTable table, {{table-interface}}.Attribute a) {		
		return table.getColumnMap().get(a.identifier());
	}

	@Override
	protected ForeignKey map(BaseTable table, {{table-interface}}.Reference r) {
		return table.foreignKeys().get(r.identifier());			
	}
	
	@Override
	public {{table-interface}}.MetaData self() {
		return this;
	}		
		
	// {{key-accessor-list}}
	

	@Override
	public {{table-interface}}.Builder newBuilder(TableReference referencing, ForeignKey referencedBy, TableReference tableRef, EntityBuildContext ctx, com.appspot.relaxe.ent.UnificationContext unificationContext)
		throws com.appspot.relaxe.ent.EntityException {
		return new BuilderImpl(referencing, referencedBy, tableRef, ctx, unificationContext);
	}	

	@Override
	public EntityKey<
		{{table-interface}}.Attribute, 
		{{table-interface}}.Reference, 
		{{table-interface}}.Type, 
		{{table-interface}}, 
		{{table-interface}}.Mutable, 
		{{table-interface}}.Holder, 
		{{table-interface}}.Factory, 
		{{table-interface}}.MetaData, ?, ?, ?, ?, ?, ?, ?, ?, ?
	> 
	getEntityKey({{table-interface}}.Reference ref) {			
		if (ref == null) {
			throw new NullPointerException("ref");
		}
		
		return entityKeyMap.get(ref);
	}
		
		
    public static class FactoryImpl
    	implements {{table-interface}}.Factory {
        @Override
        public {{table-interface}}.Mutable newEntity() {
           return new {{table-impl-class}}.{{mutable-entity-impl-class}}();
        }
        
        @Override
		public {{table-interface}}.Holder newHolder({{table-interface}} value) {
			return {{table-interface}}.Holder.valueOf(value);
		}

		@Override
		public {{table-interface}}.MetaData getMetaData() {
			return {{table-interface}}MetaData.instance;
		}

		@Override
		public {{table-interface}}.Factory self() {
			return this;
		}
    }
    
	{{foreign-key-implementation}}   
		
	
	public static class {{table-interface}}Table
		extends com.appspot.relaxe.meta.AbstractImmutableBaseTable {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 7640632830490376459L;
		private ColumnMap columnMap;
		private PrimaryKey primaryKey;
		private SchemaElementMap<ForeignKey> foreignKeys;
		
		{{base-table-column-variable-list}}
		
		/**
		 * No-argument constructor for GWT Serialization
		 */
		@SuppressWarnings("unused")
		private {{table-interface}}Table() {	
		}

		public {{table-interface}}Table(SchemaElementName tableName) {
			super(tableName);			
			
			com.appspot.relaxe.env.Environment env = getEnvironment();
			
			com.appspot.relaxe.meta.ImmutableColumnMap.Builder cmb = new com.appspot.relaxe.meta.ImmutableColumnMap.Builder(env);
			
			{{populate-column-map-block}}			
			
			this.columnMap = cmb.newColumnMap();
			this.primaryKey = createPrimaryKey(env);
			this.foreignKeys = createForeignKeyMap(env, columnMap);
		}
		
		@Override
		public com.appspot.relaxe.env.Environment getEnvironment() {
			{{get-environment-body}}
		}
		
		private PrimaryKey createPrimaryKey(com.appspot.relaxe.env.Environment env) {
			{{create-primary-key-body}}		
		}

		private SchemaElementMap<ForeignKey> createForeignKeyMap(com.appspot.relaxe.env.Environment env, com.appspot.relaxe.meta.ColumnMap columnMap) {
			{{create-foreign-key-map-body}}
		}
				
		@Override
		public ColumnMap getColumnMap() {
			return this.columnMap;
		}
		
		@Override
		public PrimaryKey getPrimaryKey() {
			return this.primaryKey;
		}

		@Override
		public SchemaElementMap<ForeignKey> foreignKeys() {
			return foreignKeys;		
		}
	}	
    
    
    
	public static class BuilderImpl
		extends com.appspot.relaxe.ent.DefaultEntityBuilder<
			{{table-interface}}.Attribute, 
			{{table-interface}}.Reference, 
			{{table-interface}}.Type, 
			{{table-interface}}, 
			{{table-interface}}.Mutable, 
			{{table-interface}}.Holder, 
			{{table-interface}}.Factory, 
			{{table-interface}}.MetaData
		>
		implements {{table-interface}}.Builder {
		
		private Linker[] linkerList = {};
								
		private interface Linker {
			void link(com.appspot.relaxe.ent.DataObject src, {{table-interface}}.Holder dest);
		}
		
		public BuilderImpl(TableReference referencing, ForeignKey referencedBy, com.appspot.relaxe.expr.TableReference tableRef, com.appspot.relaxe.ent.EntityBuildContext ctx, com.appspot.relaxe.ent.UnificationContext unificationContext) 
			throws com.appspot.relaxe.ent.EntityException {
			super(referencing, referencedBy, tableRef, ctx, unificationContext);			
			
			// {{builder-linker-init}}
		}

		@Override
		public {{table-interface}}.MetaData getMetaData() {			
			return {{table-interface}}MetaData.getInstance();
		}
		
		@Override
		public {{table-interface}}.Holder read(com.appspot.relaxe.ent.DataObject src) {			
			{{table-interface}}.Holder e = super.read(src);
			
			for (Linker lnk : linkerList) {
				lnk.link(src, e);
			}								
			
			return e;
		}
	}		
} 

