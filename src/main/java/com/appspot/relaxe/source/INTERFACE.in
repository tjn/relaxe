package {{package-name}};

import com.appspot.relaxe.ent.DataObject;
import com.appspot.relaxe.ent.Entity;
import com.appspot.relaxe.ent.MutableEntity;
import com.appspot.relaxe.ent.EntityBuildContext;
import com.appspot.relaxe.ent.EntityBuilder;
import com.appspot.relaxe.ent.EntityMetaData;
import com.appspot.relaxe.ent.EntityFactory;
import com.appspot.relaxe.ent.value.AbstractEntityKey;
import com.appspot.relaxe.expr.TableReference;
import com.appspot.relaxe.meta.ForeignKey;
import com.appspot.relaxe.types.*;
import com.appspot.relaxe.value.ReferenceHolder;

public interface {{table-interface}}
    extends com.appspot.relaxe.ent.Entity<
        {{table-interface}}.Attribute,
        {{table-interface}}.Reference,        
        {{table-interface}}.Type,
        {{table-interface}},
        {{table-interface}}.Mutable,
        {{table-interface}}.Holder,		
        {{table-interface}}.Factory,
        {{table-interface}}.MetaData
    > {{has-reference-read-list}} {{readable-attribute-container-interface-list}} {
    
	class Type extends ReferenceType<Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData> {
		private static final long serialVersionUID = 1L;
		
		@Override
		public MetaData getMetaData() {		
			return {{table-interface}}MetaData.getInstance();
		}
		
		@Override
		public Type self() {
			return this;
		}
		
		public static final Type TYPE = new Type();
	}
	
	
	
	public interface Mutable
		extends  {{table-interface}}, com.appspot.relaxe.ent.MutableEntity<
	        {{table-interface}}.Attribute,
	        {{table-interface}}.Reference,        
	        {{table-interface}}.Type,
	        {{table-interface}},
	        {{table-interface}}.Mutable,
	        {{table-interface}}.Holder,		
	        {{table-interface}}.Factory,
	        {{table-interface}}.MetaData
	    > {{has-reference-write-list}} {{writable-attribute-container-interface-list}} {
	    
	    {{entity-attribute-read-write-accessor-signature-list}}
	    
	    {{reference-container-read-write}}
	}
	
	
	public static class Holder
		extends ReferenceHolder<Attribute, Reference, Type, {{table-interface}}, Holder, MetaData> {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;		
		public static final Holder NULL = new Holder();
		
		private Holder() {			
		}

		public Holder({{table-interface}} value) {
			super(value);
		}
	
		@Override
		public Type getType() {
			return {{table-interface}}.Type.TYPE;
		}
		
		public static {{table-interface}}.Holder valueOf({{table-interface}} value) {
			return (value == null) ? {{table-interface}}.Holder.NULL : new {{table-interface}}.Holder(value);
		}
		
		@Override
		public Holder self() {
			return this;
		}
	}
	
	interface Factory
		extends com.appspot.relaxe.ent.EntityFactory<{{table-interface}}, Mutable, Holder, MetaData, Factory> {
		
	}
			
	interface MetaData
		extends com.appspot.relaxe.ent.EntityMetaData<Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData>		
		{{implemented-has-key-list}} {{attribute-key-container-interface-list}}
	{		
		@Override
		public Builder newBuilder(TableReference referencing, ForeignKey referencedBy, TableReference tableRef, EntityBuildContext ctx, com.appspot.relaxe.ent.UnificationContext unificationContext)
			throws com.appspot.relaxe.ent.EntityException;
	}
		
	interface Builder extends EntityBuilder<{{table-interface}}, {{table-interface}}.Mutable, {{table-interface}}.Holder> {
		{{table-interface}}.Holder read(DataObject src);	
	}

	
	public static abstract class Key<
		A extends com.appspot.relaxe.ent.AttributeName,
		R extends com.appspot.relaxe.ent.Reference,	
		T extends ReferenceType<A, R, T, E, B, H, F, M>,
		E extends Entity<A, R, T, E, B, H, F, M> & Has{{table-interface}}.Read<A, R, T, E, B, H, F, M>,
		B extends MutableEntity<A, R, T, E, B, H, F, M> & Has{{table-interface}}.Write<A, R, T, E, B, H, F, M>,
		H extends ReferenceHolder<A, R, T, E, H, M>,
		F extends EntityFactory<E, B, H, M, F>,
		M extends EntityMetaData<A, R, T, E, B, H, F, M> & Has{{table-interface}}Key<A, R, T, E, B, H, F, M>
	>
		extends AbstractEntityKey<A, R, T, E, B, H, F, M, {{table-interface}}.Attribute, {{table-interface}}.Reference, {{table-interface}}.Type, {{table-interface}}, {{table-interface}}.Mutable, {{table-interface}}.Holder, {{table-interface}}.Factory, {{table-interface}}.MetaData, {{table-interface}}.Key<A, R, T, E, B, H, F, M>> {

		private static final long serialVersionUID = 1L;
		
		/**
		 * No-argument constructor for GWT Serialization
		 */
		protected Key() {	
		}

		protected Key(T type, R name) {
			super(type, name);
		}		

		@Override
		public {{table-interface}}.Holder newHolder({{table-interface}} o) {
			return {{table-interface}}.Holder.valueOf(o);
		}
		
		@Override
		public {{table-interface}}.MetaData getTarget() {		
			return {{table-interface}}MetaData.getInstance();
		}
		
		public void set(B e, {{table-interface}}.Holder newValue) {
			e.set{{table-interface}}(this, newValue);			
		}
		
		public {{table-interface}}.Holder get(E e) {
			return e.get{{table-interface}}(this);			
		}		

		@Override
		public {{table-interface}}.Type type() {
			return {{table-interface}}.Type.TYPE;
		}
		
		@Override
		public {{table-interface}}.Key<A, R, T, E, B, H, F, M> self() {		
			return this;
		}
	}

	@Override
	public Holder ref();
	
{{attribute-key-list}}
{{reference-key-list}}
        
{{attribute-name-type}}    
{{reference-name-type}}


		public static class QueryElement
			extends com.appspot.relaxe.ent.DefaultEntityQueryElement<
				Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData, QueryElement> {
		
			private java.util.Set<Attribute> attributes;
			
			{{query-element-variable-list}}
		
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
		
			public QueryElement() {
				// {{query-element-default-constructor-body}}								
			}
			
			public QueryElement(java.util.Collection<Attribute> attributes) {
				if (attributes != null && (!attributes.isEmpty())) {
					this.attributes = new java.util.TreeSet<Attribute>(attributes);
				}
			}			
			
			{{query-element-constructor-list}}
			
			public QueryElement self() {
				return this;
			}
			
			@Override
			public MetaData getMetaData() {
				return {{table-interface}}.Type.TYPE.getMetaData();
			}

			@Override
			public int getElementCount() {
				return 0;
			}

			@Override
			public java.util.Set<Attribute> attributes() {
				if (attributes == null) {
					return java.util.Collections.emptySet();
				}
				
				return java.util.Collections.unmodifiableSet(attributes);				
			}
			
			@Override
			public com.appspot.relaxe.ent.EntityQueryElement<?, ?, ?, ?, ?, ?, ?, ?, ?> getQueryElement(
					com.appspot.relaxe.ent.value.EntityKey<Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData, ?, ?, ?, ?, ?, ?, ?, ?, ?> key) {
				// {{query-element-getter-body}}
			}
			
			
			// {{per-type-query-element-getter-list}}
			
			
			public static class Builder 
				implements com.appspot.relaxe.ent.EntityQueryElement.Builder<
					Attribute, 
					Reference, 
					Type, 
					{{table-interface}},
					Mutable, 
					Holder, 
					Factory, 
					MetaData,
					QueryElement
				> {
				
				private java.util.Set<{{table-interface}}.Attribute> attributes;
								
				// {{query-element-variable-list}}
			
				public Builder() {
					// {{query-element-builder-default-constructor-body}}
				}
								
				
				@Override
				public com.appspot.relaxe.ent.EntityQueryElement<?, ?, ?, ?, ?, ?, ?, ?, ?> getQueryElement(
						com.appspot.relaxe.ent.value.EntityKey<Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData, ?, ?, ?, ?, ?, ?, ?, ?, ?> key) {											
					// {{query-element-getter-body}}
				}
				
				// {{per-type-query-element-getter-list}}

				@Override
				public <
					RA extends com.appspot.relaxe.ent.AttributeName, 
					RR extends com.appspot.relaxe.ent.Reference, 
					RT extends ReferenceType<RA, RR, RT, RE, RB, RH, RF, RM>, 
					RE extends Entity<RA, RR, RT, RE, RB, RH, RF, RM>, 
					RB extends MutableEntity<RA, RR, RT, RE, RB, RH, RF, RM>,
					RH extends ReferenceHolder<RA, RR, RT, RE, RH, RM>, 
					RF extends EntityFactory<RE, RB, RH, RM, RF>, 
					RM extends EntityMetaData<RA, RR, RT, RE, RB, RH, RF, RM>,
					RQ extends com.appspot.relaxe.ent.EntityQueryElement<RA, RR, RT, RE, RB, RH, RF, RM, RQ>, 
					K extends com.appspot.relaxe.ent.value.EntityKey<
						{{table-interface}}.Attribute, 
						{{table-interface}}.Reference, 
						{{table-interface}}.Type, 
						{{table-interface}}, 
						{{table-interface}}.Mutable,
						{{table-interface}}.Holder, 
						{{table-interface}}.Factory, 
						{{table-interface}}.MetaData,
						RA, RR, RT, RE, RB, RH, RF, RM, K
					>
				> 
				void setQueryElement(K key, RQ qe) {
					// {{query-element-setter-body}}
				}
				
				@Override
				public void addAllAttributes() {					
					attributeSet().addAll({{table-interface}}.Type.TYPE.getMetaData().attributes());										
				}
				
				public void add(com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, ?, ?, ?, ?, ?> key) {
					add(key.name());
				}
				
				public void add(Attribute attribute) {
					if (attribute == null) {
						throw new NullPointerException("attribute");
					}
					
					attributeSet().add(attribute);
				}
				
				@Override
				public void remove(Attribute attribute) {
					attributeSet().remove(attribute);									
				}
				
				@Override
				public void remove(com.appspot.relaxe.ent.value.Attribute<{{table-interface}}.Attribute, {{table-interface}}, ?, ?, ?, ?, ?> key) {
					remove(key.name());
				}
				
				@Override
				public void removeAll(java.util.Collection<Attribute> attributes) {					
					attributeSet().removeAll(attributes);									
				}
				
				private java.util.Set<{{table-interface}}.Attribute> attributeSet() {
					if (this.attributes == null) {
						this.attributes = new java.util.TreeSet<{{table-interface}}.Attribute>();
					}
					
					return this.attributes;
				}
				

				@Override
				public QueryElement newQueryElement() {
					QueryElement qe = new QueryElement(this.attributes);
					
					// {{query-element-assignment-list}}					
					
					return qe;
				}
			}			
		}
				
		public static class Query
			extends com.appspot.relaxe.ent.DefaultEntityQuery<
				Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData, QueryElement
			> 
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			/**
			 * No-argument constructor for GWT Serialization
			 */
			@SuppressWarnings("unused")
			private Query() {	
			}
			
			public Query(java.util.Collection<Attribute> attributes) {
				this(new QueryElement(attributes));
			}
			
			public Query(QueryElement root) {
				super(root, null);
			}
			
			public Query(QueryElement root, com.appspot.relaxe.ent.query.EntityQueryPredicate qp) {
				super(root, qp);
			}			
			
			private Query(QueryElement root,
					java.util.Collection<com.appspot.relaxe.ent.query.EntityQueryPredicate> predicates,
					java.util.List<com.appspot.relaxe.ent.query.EntityQuerySortKey> sortKeys) {
				super(root, predicates, sortKeys);			
			}
			
			public static class Builder
				extends com.appspot.relaxe.ent.DefaultEntityQuery.Builder<Attribute, Reference, Type, {{table-interface}}, Mutable, Holder, Factory, MetaData, QueryElement> {

				public Builder(QueryElement root) {
					super(root);
				}
				
				@Override
				public {{table-interface}}.Query newQuery() {
					return new {{table-interface}}.Query(getRootElement(), getPredicates(), getSortKeys());
				}
			}
		}
		
	{{entity-attribute-read-accessor-signature-list}}
	
	{{reference-container-read}}

} 

