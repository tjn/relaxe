package {{package-name}};

{{imports}}

import com.appspot.relaxe.ent.Operation;

/**
	Generated by com.appspot.relaxe.source.SourceGenerator
*/
public class {{table-impl-class}}
	    extends com.appspot.relaxe.ent.DefaultImmutableEntity<
	        {{table-interface}}.Attribute,
	        {{table-interface}}.Reference,        
	        {{table-interface}}.Type,
	        {{table-interface}},		
	        {{table-interface}}.Mutable,
	        {{table-interface}}.Holder,        
	        {{table-interface}}.Factory,
	        {{table-interface}}.MetaData
	    >
	    implements {{table-interface}}
{

    private {{table-interface}}.Holder holder;
    private {{table-impl-class}}.PrimaryKeyEntity primaryKey;
    
    @Override
    public {{table-interface}} asImmutable() {
       	return this;
    }
    
    @Override
    public {{table-interface}} asRead() {
       	return this;
    }
    
    @Override
    public {{table-interface}}.Mutable asWrite() {
       	return null;
    }    
    

	{{attribute-container-implementation-read}}
	
	{{reference-container-implementation-read}}
        
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;    
    
    private {{immutable-entity-impl-class}}() {
    	{{immutable-entity-impl-no-arg-constructor-body}}
    }
    
    private {{immutable-entity-impl-class}}({{mutable-entity-impl-class}} src) {
   		{{immutable-entity-impl-copy-constructor-body}}
    }
    

    @Override       
    public {{table-interface}}MetaData getMetaData() {      
        return {{table-interface}}MetaData.getInstance();
    }
    
    private static {{table-interface}} newImmutable(final {{mutable-entity-impl-class}} me, Operation.Context ctx) {
    
    	{{immutable-entity-impl-class}} ne = me.get(ctx);
    	
    	if (ne != null) {
    		return ne;
    	}
    	
    	ne = new {{immutable-entity-impl-class}}(me);
    	me.put(ctx, ne);
    	
    	// reference-assignment-list: 
    	{{reference-assignment-list}}    
    
    	return ne;
    }
    
    
       
    @Override       
    public {{table-interface}} self() {     
        return this;
    }
    
    @Override
	public {{table-interface}}.Holder ref() {
		if (holder == null) {
			holder = new {{table-interface}}.Holder(this);		
		}

		return holder;		
	}
	
	
	/**	
    	public VarcharAccessor<Attribute, Person> lastName() {
	    	if (this.lastName == null) {
	    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
	    	}
	    	
	    	return this.lastName;
	    }	
	*/
	
	
	@Override
	public java.util.Set<Attribute> attributes() {
		java.util.Set<Attribute> attrs = java.util.EnumSet.noneOf(Attribute.class);
	
		{{attributes-method-statement-list}}
			
		return java.util.Collections.unmodifiableSet(attrs);
	}
	
	

    /**
     * {reference-map-list} below: 
     */
    {{reference-map-list-read}}
    
	{{entity-attribute-read-accessor-list}}

	
	
/**
		Generated by com.appspot.relaxe.source.SourceGenerator
	*/
	public static class {{mutable-entity-impl-class}}
	    extends com.appspot.relaxe.ent.DefaultMutableEntity<
	        {{table-interface}}.Attribute,
	        {{table-interface}}.Reference,        
	        {{table-interface}}.Type,
	        {{table-interface}},		
	        {{table-interface}}.Mutable,
	        {{table-interface}}.Holder,        
	        {{table-interface}}.Factory,
	        {{table-interface}}.MetaData
	    >
	    implements {{table-interface}}, {{table-interface}}.Mutable, Operation.Callback
	{
	        
	    private {{table-interface}}.Holder holder;
	    
	    private transient java.util.Map<com.appspot.relaxe.ent.Operation.Context, {{immutable-entity-impl-class}}> immutationContextMap;
	    
	    private java.util.Map<Operation.Context, {{immutable-entity-impl-class}}> getImmutationContextMap(com.appspot.relaxe.ent.Operation.Context ctx) {
			if (immutationContextMap == null) {
				immutationContextMap = new java.util.HashMap<com.appspot.relaxe.ent.Operation.Context, {{immutable-entity-impl-class}}>(2);
				ctx.register(this);				
			}
			
			return immutationContextMap;
		}
			
	    
	    @Override
	    public void finish(Operation.Context context) {
	    	if (immutationContextMap != null) {
	    		immutationContextMap.remove(context);
	    	}
	    }	
	    
	    private {{immutable-entity-impl-class}} get(Operation.Context ctx) {
	    	if (immutationContextMap == null) {
	    		return null;
	    	}
	    	
	    	return immutationContextMap.get(ctx);	    	
	    }
	    
	    private void put(Operation.Context ctx, {{immutable-entity-impl-class}} associated) {
	    	getImmutationContextMap(ctx).put(ctx, associated);	    	
	    }	    
	    
	    @Override
	    public {{table-interface}} asRead() {
	    	return this;
	    }
	    
	    @Override
	    public {{table-interface}}.Mutable asWrite() {
	    	return this;
	    }
	    
	    @Override
	    public final {{table-interface}} asImmutable() {
	    	return null;
	    }
	    	    
	    @Override       
	    public {{table-interface}} self() {     
	        return this;
	    }
	    
	    @Override       
	    public {{table-interface}} as() {     
	        return this;
	    }
	    
		@Override
		public {{table-interface}}.Mutable asMutable() {
			return this;
		}
		
	    
	    @Override
		public {{table-interface}} toImmutable(Operation.Context ic) {			
			return {{immutable-entity-impl-class}}.newImmutable(this, ic);
		}
	        
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;    
	    
	    public {{mutable-entity-impl-class}}() {
	    }
	
	    @Override       
	    public {{table-interface}}MetaData getMetaData() {      
	        return {{table-interface}}MetaData.getInstance();
	    }
	    
	    @Override
		public {{table-interface}}.Holder ref() {
			if (holder == null) {
				holder = new {{table-interface}}.Holder(this);		
			}
	
			return holder;		
		}
		
		/**	
	    	public VarcharAccessor<Attribute, Person> lastName() {
		    	if (this.lastName == null) {
		    		this.lastName = new VarcharAccessor<Attribute, HourReport>(self(), PersonMetaData.LAST_NAME);
		    	}
		    	
		    	return this.lastName;
		    }	
		*/
		
		@Override
		public java.util.Set<{{table-interface}}.Attribute> attributes() {
			java.util.Set<{{table-interface}}.Attribute> attrs = java.util.EnumSet.noneOf({{table-interface}}.Attribute.class);
		
			{{attributes-method-statement-list}}
				
			return java.util.Collections.unmodifiableSet(attrs);
		}
		
	
	    /**
	     * {reference-map-list} below: 
	     */
	    {{reference-map-list-read-write}}
	    
		{{entity-attribute-read-write-accessor-list}}
		
		{{attribute-container-implementation-read-write}}
		
		{{reference-container-implementation-read-write}}
		
		@Override
		public {{table-interface}} toPrimaryKey(com.appspot.relaxe.ent.Operation.Context ctx) {
			return {{table-impl-class}}.PrimaryKeyEntity.of(this, ctx);	
		}
		
	}
	
	
	public static class PrimaryKeyEntity
		extends com.appspot.relaxe.ent.DefaultImmutableEntity<
		    {{table-interface}}.Attribute,
		    {{table-interface}}.Reference,        
		    {{table-interface}}.Type,
		    {{table-interface}},		
		    {{table-interface}}.Mutable,
		    {{table-interface}}.Holder,        
		    {{table-interface}}.Factory,
		    {{table-interface}}.MetaData
		>		
		implements {{table-interface}} {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;		
		
		{{primary-key-entity-variables}}
		
		{{primary-key-entity-reference-container-implementation}}
				
		private PrimaryKeyEntity() {				
			{{primary-key-entity-no-arg-constructor-body}}	
		}
		
		private PrimaryKeyEntity({{table-interface}} src, com.appspot.relaxe.ent.Operation.Context ctx) {
			{{primary-key-entity-constructor-body}}
		}
		
		
		
		@Override
		public {{table-interface}} toPrimaryKey() {
			return this;
		}
		
		
		@Override
		public {{table-interface}} toPrimaryKey(com.appspot.relaxe.ent.Operation.Context ctx) {
			return this;
		}
				
		
		@Override
		public {{table-interface}} asImmutable() {
			return this;
		}
		
		@Override
		public {{table-interface}} asRead() {
			return this;
		}
		
		@Override
		public {{table-interface}}.Mutable asWrite() {
			return null;
		}
				
		@Override
		public {{table-interface}} self() {
			return this;
		}
		
		@Override
		public {{table-interface}}.Holder ref() {
			return {{table-interface}}.Holder.valueOf(self());
		}
		
		@Override
		public java.util.Set<{{table-interface}}.Attribute> attributes() {
			return {{table-impl-class}}.PrimaryKeyEntity.attributes;
		}
		
		@Override
		public {{table-interface}}.MetaData getMetaData() {
			return {{table-interface}}MetaData.getInstance();
		}
		
		{{primary-key-entity-attribute-set}}
						
		{{primary-key-entity-attribute-accessor-list}}
		
		{{primary-key-entity-reference-map-list}}
		
		
		
		private static {{table-impl-class}}.PrimaryKeyEntity of({{table-interface}} src, com.appspot.relaxe.ent.Operation.Context ctx) {
			{{primary-key-entity-of-method-body}}		
		}
		
		
		
	}
	
	@Override
	public {{table-interface}} toPrimaryKey(com.appspot.relaxe.ent.Operation.Context ctx) {		
		if (this.primaryKey != null) {
			return this.primaryKey;
		}
	
		this.primaryKey = {{table-impl-class}}.PrimaryKeyEntity.of(this, ctx);
		 
		return this.primaryKey;
	}
	    
} 

