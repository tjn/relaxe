/*
 * This file is part of Relaxe.
 * Copyright (c) 2014 Topi Nieminen
 * Author: Topi Nieminen <topi.nieminen@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 */
package com.appspot.relaxe.env.mysql;

import java.util.Map;
import java.util.TreeMap;

import com.appspot.relaxe.expr.ElementVisitor;
import com.appspot.relaxe.expr.SQLKeyword;
import com.appspot.relaxe.expr.Token;
import com.appspot.relaxe.expr.VisitContext;

public enum MySQLKeyword
    implements Token {
    
    ACCESSIBLE,
    ADD,
    ALL,
    ALTER,
    ANALYZE,
    AND,
    AS,
    ASC,
    ASENSITIVE,
    BEFORE,
    BETWEEN,
    BIGINT,
    BINARY,
    BLOB,
    BOTH,
    BY,
    CALL,
    CASCADE,
    CASE,
    CHANGE,
    CHAR,
    CHARACTER,
    CHECK,
    COLLATE,
    COLUMN,
    CONDITION,
    CONSTRAINT,
    CONTINUE,
    CONVERT,
    CREATE,
    CROSS,
    CURRENT_DATE,
    CURRENT_TIME,
    CURRENT_TIMESTAMP,
    CURRENT_USER,
    CURSOR,
    DATABASE,
    DATABASES,
    DAY_HOUR,
    DAY_MICROSECOND,
    DAY_MINUTE,
    DAY_SECOND,
    DEC,
    DECIMAL,
    DECLARE,
    DEFAULT,
    DELAYED,
    DELETE,
    DESC,
    DESCRIBE,
    DETERMINISTIC,
    DISTINCT,
    DISTINCTROW,
    DIV,
    DOUBLE,
    DROP,
    DUAL,
    EACH,
    ELSE,
    ELSEIF,
    ENCLOSED,
    ESCAPED,
    EXISTS,
    EXIT,
    EXPLAIN,
    FALSE,
    FETCH,
    FLOAT,
    FLOAT4,
    FLOAT8,
    FOR,
    FORCE,
    FOREIGN,
    FROM,
    FULLTEXT,
    GET,
    GRANT,
    GROUP,
    HAVING,
    HIGH_PRIORITY,
    HOUR_MICROSECOND,
    HOUR_MINUTE,
    HOUR_SECOND,
    IF,
    IGNORE,
    IN,
    INDEX,
    INFILE,
    INNER,
    INOUT,
    INSENSITIVE,
    INSERT,
    INT,
    INT1,
    INT2,
    INT3,
    INT4,
    INT8,
    INTEGER,
    INTERVAL,
    INTO,
    IO_AFTER_GTIDS,
    IO_BEFORE_GTIDS,
    IS,
    ITERATE,
    JOIN,
    KEY,
    KEYS,
    KILL,
    LEADING,
    LEAVE,
    LEFT,
    LIKE,
    LIMIT,
    LINEAR,
    LINES,
    LOAD,
    LOCALTIME,
    LOCALTIMESTAMP,
    LOCK,
    LONG,
    LONGBLOB,
    LONGTEXT,
    LOOP,
    LOW_PRIORITY,
    MASTER_BIND,
    MASTER_SSL_VERIFY_SERVER_CERT,
    MATCH,
    MAXVALUE,
    MEDIUMBLOB,
    MEDIUMINT,
    MEDIUMTEXT,
    MIDDLEINT,
    MINUTE_MICROSECOND,
    MINUTE_SECOND,
    MOD,
    MODIFIES,
    NATURAL,
    NO_WRITE_TO_BINLOG,
    NOT,
    NULL,
    NUMERIC,
    ON,
    OPTIMIZE,
    OPTION,
    OPTIONALLY,
    OR,
    ORDER,
    OUT,
    OUTER,
    OUTFILE,
    PARTITION,
    PRECISION,
    PRIMARY,
    PROCEDURE,
    PURGE,
    RANGE,
    READ,
    READ_WRITE,
    READS,
    REAL,
    REFERENCES,
    REGEXP,
    RELEASE,
    RENAME,
    REPEAT,
    REPLACE,
    REQUIRE,
    RESIGNAL,
    RESTRICT,
    RETURN,
    REVOKE,
    RIGHT,
    RLIKE,
    SCHEMA,
    SCHEMAS,
    SECOND_MICROSECOND,
    SELECT,
    SENSITIVE,
    SEPARATOR,
    SET,
    SHOW,
    SIGNAL,
    SMALLINT,
    SPATIAL,
    SPECIFIC,
    SQL,
    SQL_BIG_RESULT,
    SQL_CALC_FOUND_ROWS,
    SQL_SMALL_RESULT,
    SQLEXCEPTION,
    SQLSTATE,
    SQLWARNING,
    SSL,
    STARTING,
    STRAIGHT_JOIN,
    TABLE,
    TERMINATED,
    THEN,
    TINYBLOB,
    TINYINT,
    TINYTEXT,
    TO,
    TRAILING,
    TRIGGER,
    TRUE,
    UNDO,
    UNION,
    UNIQUE,
    UNLOCK,
    UNSIGNED,
    UPDATE,
    USAGE,
    USE,
    /**
     * <code>DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
        FROM tbl_name[.*] [, tbl_name[.*]] ...
        <bold>USING</bold> table_references
        [WHERE where_condition]
        </code>
     */    
    USING,
    UTC_DATE,
    UTC_TIME,
    UTC_TIMESTAMP,
    VALUES,
    VARBINARY,
    VARCHAR,
    VARCHARACTER,
    VARYING,
    WHEN,
    WHERE,
    WHILE,
    WITH,
    WRITE,
    XOR,
    YEAR_MONTH,
    ZEROFILL,
// Reported by JDBC Driver
//    ACCESSIBLE,
//    ANALYZE,
//    ASENSITIVE,
//    BEFORE,
//    BIGINT,
//    BINARY,
//    BLOB,
//    CALL,
//    CHANGE,
//    CONDITION,
//    DATABASE,
//    DATABASES,
//    DAY_HOUR,
//    DAY_MICROSECOND,
//    DAY_MINUTE,
//    DAY_SECOND,
//    DELAYED,
//    DETERMINISTIC,
//    DISTINCTROW,
//    DIV,
//    DUAL,
//    EACH,
//    ELSEIF,
//    ENCLOSED,
//    ESCAPED,
//    EXIT,
//    EXPLAIN,
//    FLOAT4,
//    FLOAT8,
//    FORCE,
//    FULLTEXT,
//    GENERAL,
//    HIGH_PRIORITY,
//    HOUR_MICROSECOND,
//    HOUR_MINUTE,
//    HOUR_SECOND,
//    IF,
//    IGNORE,
//    IGNORE_SERVER_IDS,
//    INFILE,
//    INOUT,
//    INT1,
//    INT2,
//    INT3,
//    INT4,
//    INT8,
//    ITERATE,
//    KEYS,
//    KILL,
//    LEAVE,
//    LIMIT,
//    LINEAR,
//    LINES,
//    LOAD,
//    LOCALTIME,
//    LOCALTIMESTAMP,
//    LOCK,
//    LONG,
//    LONGBLOB,
//    LONGTEXT,
//    LOOP,
//    LOW_PRIORITY,
//    MASTER_HEARTBEAT_PERIOD,
//    MAXVALUE,
//    MEDIUMBLOB,
//    MEDIUMINT,
//    MEDIUMTEXT,
//    MIDDLEINT,
//    MINUTE_MICROSECOND,
//    MINUTE_SECOND,
//    MOD,
//    MODIFIES,
//    NO_WRITE_TO_BINLOG,
//    OPTIMIZE,
//    OPTIONALLY,
//    OUT,
//    OUTFILE,
//    PURGE,
//    RANGE,
//    READS,
//    READ_ONLY,
//    READ_WRITE,
//    REGEXP,
//    RELEASE,
//    RENAME,
//    REPEAT,
//    REPLACE,
//    REQUIRE,
//    RESIGNAL,
//    RETURN,
//    RLIKE,
//    SCHEMAS,
//    SECOND_MICROSECOND,
//    SENSITIVE,
//    SEPARATOR,
//    SHOW,
//    SIGNAL,
//    SLOW,
//    SPATIAL,
//    SPECIFIC,
//    SQLEXCEPTION,
//    SQL_BIG_RESULT,
//    SQL_CALC_FOUND_ROWS,
//    SQL_SMALL_RESULT,
//    SSL,
//    STARTING,
//    STRAIGHT_JOIN,
//    TERMINATED,
//    TINYBLOB,
//    TINYINT,
//    TINYTEXT,
//    TRIGGER,
//    UNDO,
//    UNLOCK,
//    UNSIGNED,
//    USE,
//    UTC_DATE,
//    UTC_TIME,
//    UTC_TIMESTAMP,
//    VARBINARY,
//    VARCHARACTER,
//    WHILE,
//    X509,
//    XOR,
//    YEAR_MONTH,
//    ZEROFILL
//    ,
    ;
        
	private static Map<String, SQLKeyword> keywordMap = new TreeMap<String, SQLKeyword>(String.CASE_INSENSITIVE_ORDER); 
	
	static {
		for (SQLKeyword kw : SQLKeyword.values()) {
			keywordMap.put(kw.name(), kw);
		}		
	}    
    
    @Override
	public void traverse(VisitContext vc, ElementVisitor v) {
        v.start(vc, this);
        v.end(this);        
    }
    
    @Override
    public String getTerminalSymbol() {
        return super.toString();
    }

    @Override
    public boolean isOrdinary() {
        return true;
    }
    
	public static boolean isKeyword(String s) {				
		return keywordMap.containsKey(s);
	}
}
