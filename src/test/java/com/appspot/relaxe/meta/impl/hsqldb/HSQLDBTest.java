/*
 * This file is part of Relaxe.
 * Copyright (c) 2013 Topi Nieminen
 * Author: Topi Nieminen <topi.nieminen@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 */
package com.appspot.relaxe.meta.impl.hsqldb;


import com.appspot.relaxe.AbstractUnitTest;
import com.appspot.relaxe.TestContext;
import com.appspot.relaxe.env.PersistenceContext;
import com.appspot.relaxe.env.hsqldb.HSQLDBImplementation;
import com.appspot.relaxe.env.hsqldb.HSQLDBPersistenceContext;


public class HSQLDBTest
	extends AbstractUnitTest<HSQLDBImplementation>
{	
	public HSQLDBTest() {
		super();	
	}
			
	public void testA() throws Exception {		
		logger().debug("enter: " + getName());
		TestContext<HSQLDBImplementation> imp = getContext();
		
		assertNotNull(imp);
		logger().debug("exit: " + getName());
	}
	
	
	@Override
	public String getDatabase() {
		return "test";
	}
	
	@Override
	public String getUser() {
		return null;
	}
	
	public void testConnection() throws Exception {
		
		TestContext<HSQLDBImplementation> imp = getContext();
//		Driver d = imp.getImplementation().getDriver();		
//		
//		Connection c = d.connect("jdbc:hsqldb:mem:test", null);
		
//		assertNotNull(c);
		
		
//		Statement st = c.createStatement();
//		
//		{		
//			String cr = "create table a(id integer generated by default as identity, primary key(id), name varchar(200) default '')";
//			
//			{
//				int u = st.executeUpdate(cr);
//				logger().debug("testConnection: u=" + u);
//			}
//			
//		 
//			{
//				String is = "insert into a(name) values ( default ) ";
//				int u = st.executeUpdate(is, Statement.RETURN_GENERATED_KEYS);
//				logger().debug("testConnection: u=" + u);
//							
//				ResultSet rs = st.getGeneratedKeys();
//				
//				ResultSetWriter rw = new ResultSetWriter(System.out, false);
//				rw.apply(rs, true);
//				
//			}
//		}
//		
//		
//		{		
//			String cr = "create table b(id integer generated by default as identity (start with 15), primary key(id), name varchar(200) default '')";
//			
//			{
//				int u = st.executeUpdate(cr);
//				logger().debug("testConnection: u=" + u);
//			}
//			
//		 
//			{
//				String is = "insert into b(name) values ( default ), ( default ) ";
//				int u = st.executeUpdate(is, Statement.RETURN_GENERATED_KEYS);
//				logger().debug("testConnection: ub=" + u);
//							
//				ResultSet rs = st.getGeneratedKeys();
//				
//				ResultSetWriter rw = new ResultSetWriter(System.out, false);
//				rw.apply(rs, true);
//				
//			}
//		}		
//
//		
//		{		
//			String cr = "create table c(id integer generated by default as identity (start with 1 increment by 2), name varchar(200) default '', primary key(id, name))";
//			
//			{
//				int u = st.executeUpdate(cr);
//				logger().debug("testConnection: u=" + u);
//			}
//			
//		 
//			{
//				String is = "insert into c(id, name) values ( default, default ), ( default, default), (1, 'abc') ";
//				int u = st.executeUpdate(is, Statement.RETURN_GENERATED_KEYS);
//				logger().debug("testConnection: uc=" + u);
//							
//				ResultSet rs = st.getGeneratedKeys();
//				
//				ResultSetWriter rw = new ResultSetWriter(System.out, false);
//				rw.apply(rs, true);				
//			}
//		}	
//		
//		st.close();
//		
//		c.close();
	}

	@Override
	protected PersistenceContext<HSQLDBImplementation> createPersistenceContext() {
		return new HSQLDBPersistenceContext();
	}
	
	@Override
	protected String implementationTag() {
		return "hsqldb";
	}
}
